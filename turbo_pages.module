<?php
/**
 * @file
 * A description of what your module does.
 */

define('PATH_TURBO_PAGES_RSS', DRUPAL_ROOT . '/sites/default/files/turbo_pages');

/**
 * Implements hook_disable().
 */
function turbo_pages_disable() {
  unlink(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss');
  rmdir(PATH_TURBO_PAGES_RSS);
  drupal_set_message('Директория <em>' . PATH_TURBO_PAGES_RSS . '</em> удалена');
}

/**
 * Implements hook_menu().
 */
function turbo_pages_menu() {
  $items = array();

  $items['admin/config/search/turbo_pages'] = array(
    'title' => 'Yandex Turbo pages',
    'description' => 'Config module Yandex Turbo pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('turbo_pages_form_config'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'weight' => 20,
    'type' => MENU_NORMAL_ITEM,
  );

  $rss_url = variable_get('turbo_pages_rss_url', 'turbo-pages.rss');
  $items[$rss_url] = array(
    'page callback' => '_get_rss',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * @param $form
 *
 * @return mixed
 */
function turbo_pages_form_config($form) {
  global $base_url;

  $path_rss = PATH_TURBO_PAGES_RSS . '/turbo_pages.rss';
  $text_field_list = _get_col_from_db('field_config', 'field_name', NULL, array('module' => array('text')));
  $image_field_list = _get_col_from_db('field_config', 'field_name', NULL, array('module' => array('image')));

  $form['channel'] = array(
    '#type' => 'fieldset',
    '#title' => t('Channel'),
    '#weight' => 0,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
  );

  $form['channel']['turbo_pages_rss_url'] = array(
    '#type' => 'textfield',
    '#title' => t('RSS url'),
    '#default_value' => variable_get('turbo_pages_rss_url', 'turbo-pages.rss'),
    '#field_prefix' => $base_url . '/',
  );

  $form['channel']['turbo_pages_channel_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Channel title'),
    '#default_value' => variable_get('turbo_pages_channel_title', NULL),
  );

  $form['channel']['turbo_pages_channel_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Channel description'),
    '#default_value' => variable_get('turbo_pages_channel_description', NULL),
  );

  $form['channel']['turbo_pages_content_types'] = array(
    '#title' => t('Content types'),
    '#required' => TRUE,
    '#description' => t('Binds turbo pages to specified types of materials.'),
    '#type' => 'checkboxes',
    '#options' => _get_col_from_db('node_type', 'type', 'name'),
    '#default_value' => variable_get('turbo_pages_content_types', ''),
  );

  $form['channel']['turbo_pages_content_fields'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#multiple' => TRUE,
    '#title' => t('Content field'),
    '#options' => $text_field_list,
    '#default_value' =>  variable_get('turbo_pages_content_fields', ''),
    '#description' => t('The field where to take content.'),
  );

  $form['channel']['turbo_pages_content_image_field'] = array(
    '#type' => 'select',
    '#required' => FALSE,
    '#multiple' => FALSE,
    '#title' => t('Image field'),
    '#options' => ['none' => t('None')] + $image_field_list,
    '#default_value' =>  variable_get('turbo_pages_content_image_field', ''),
    '#description' => t('The image displayed above the content. The first image is taken, with more than one.'),
  );

  $form['channel']['turbo_pages_username_field'] = array(
    '#type' => 'select',
    '#title' => t('Username field'),
    '#options' => ['none' => t('None')] + $text_field_list,
    '#default_value' =>  variable_get('turbo_pages_username_field', 'none'),
    '#description' => t('The field from which the value of the author will be taken. The default will be <em>$node->name</em>.'),
  );

  $form['creating_rss'] = array(
    '#type' => 'fieldset',
    '#title' => t('Creating RSS file'),
    '#weight' => 1,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
  );

  $form['creating_rss']['turbo_pages_enable_cron'] = array(
    '#title' => t('Create by cron'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('turbo_pages_enable_cron', ''),
  );

  $form['creating_rss']['turbo_pages_rss_update_frequency'] = array(
    '#type' => 'select',
    '#title' => t('Update frequency'),
    '#options' => array(
      86400 => t('Every 1 day'),
      604800 => t('Every 7 day'),
      2592000 => t('Every 30 day'),
      0 => t('Custom')
    ),
    '#default_value' => variable_get('turbo_pages_rss_update_frequency', ''),
    '#states' => array(
      'visible' => array(
        'input[name="turbo_pages_enable_cron"]' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );

  $form['creating_rss']['turbo_pages_rss_update_frequency_custom'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom'),
    '#default_value' => variable_get('turbo_pages_rss_update_frequency_custom', ''),
    '#states' => array(
      'visible' => array(
        'select[name="turbo_pages_rss_update_frequency"]' => array(
          'value' => 0,
        ),
        'input[name="turbo_pages_enable_cron"]' => array(
          'checked' => TRUE,
        ),
      ),
      'required' => array(
        'select[name="turbo_pages_rss_update_frequency"]' => array(
          'value' => 0,
        ),
      ),
    ),
  );

  $form['creating_rss']['turbo_pages_create_rss'] = array(
    '#value' => t('Create RSS'),
    '#type' => 'submit',
    '#submit' => array('_create_rss'),
  );

  if (file_exists($path_rss)) {
    $file_created = filemtime($path_rss);
    $form['creating_rss']['turbo_pages_rss_created'] = array(
      '#markup' => '<div class="description">' . t('Created') . ': <b>' . format_date($file_created, 'medium') . '</b></div>',
    );
  }

  // Обработка получаемого контента
  $form['content_processing'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Processing'),
    '#weight' => 2,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
  );

  $form['content_processing']['turbo_pages_preg_replaces'] = array(
    '#type' => 'textarea',
    '#title' => t('Preg replaces'),
    '#description' => t('Enter each regular expression on a new line.'),
    '#default_value' => variable_get('turbo_pages_preg_replaces', ''),
  );

  $form['content_processing']['turbo_pages_allowable_tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Allowable tags'),
    '#default_value' => variable_get('turbo_pages_allowable_tags', '<p> <h2> <h3> <h4> <h5> <h6> <ul> <ol> <li> <blockquote> <div> <b> <strong> <em>'),
  );

  $form['content_processing']['turbo_pages_content_trim'] = array(
    '#title' => t('Trim content to a maximum length'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('turbo_pages_content_trim', FALSE),
  );

  $form['content_processing']['turbo_pages_content_max_length'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum length'),
    '#default_value' => variable_get('turbo_pages_content_max_length', ''),
    '#states' => array(
      'visible' => array(
        'input[name="turbo_pages_content_trim"]' => array(
          'checked' => TRUE,
        ),
      ),
    ),
  );

  $form['content_processing']['turbo_pages_rss_minify'] = array(
    '#title' => t('Minify RSS'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('turbo_pages_rss_minify', FALSE),
  );

  $form = system_settings_form($form);

  return $form;
}

/**
 * Implements hook_cron().
 */
function turbo_pages_cron() {
  $flag_cron = variable_get('turbo_pages_enable_cron', NULL);

  if ($flag_cron) {
    $update_frequency = variable_get('turbo_pages_rss_update_frequency', NULL);

    if (!(int)$update_frequency) {
      $update_frequency = variable_get('turbo_pages_rss_update_frequency_custom', NULL);
    }

    $file_create = filemtime(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss');
    $time = time();

    if (($file_create + $update_frequency) < $time) {
      _create_rss();
    }
  }
}

/**
 * Implement hook_theme().
 */
function turbo_pages_theme() {
  return array(
    'turbo_pages__rss' => array(
      'template' => 'templates/turbo-pages--rss',
      'variables' => array(
        'channel_title' => NULL,
        'channel_description' => NULL,
        'nodes' => NULL,
      ),
    ),
  );
}

/**
 * Создает или перезаписывает файл
 */
function _create_rss() {
  $flag_minify = variable_get('turbo_pages_rss_minify', FALSE);

  if (!is_dir(PATH_TURBO_PAGES_RSS)) {
    mkdir(PATH_TURBO_PAGES_RSS, 0755);
  }
  // Перенос строки - \r\n

  $rss_content = _generate_content_rss();

  if($flag_minify) {
    _minify_rss($rss_content);
  }

  // Открываем файл, флаг W означает - файл открыт на запись
  $file_rss = fopen(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss', 'w');

  fwrite($file_rss, $rss_content);
  // Закрывает открытый файл
  fclose($file_rss);

  watchdog('turbo_pages', 'RSS created');
}

/**
 * @param $rss_content
 */
function _minify_rss(&$rss_content) {
  $search = array(
    '/\>[^\S ]+/s',     // strip whitespaces after tags, except space
    '/[^\S ]+\</s',     // strip whitespaces before tags, except space
    '/(\s)+/s',         // shorten multiple whitespace sequences
    '/<!--(.|\s)*?-->/', // Remove HTML comments
  );

  $replace = array(
    '>',
    '<',
    '\\1',
    '',
  );

  $rss_content = str_replace('  ', '', $rss_content);
  $rss_content = preg_replace($search, $replace, $rss_content);
}

/**
 *
 */
function _generate_content_rss(){
  $uid = NULL;
  $nodes = array();
  $drupal_nodes = _get_content_rss();

  $channel_title = variable_get('turbo_pages_channel_title', NULL);
  $channel_description = variable_get('turbo_pages_channel_description', NULL);

  $content_fields = variable_get('turbo_pages_content_fields', FALSE);
  $image_field = variable_get('turbo_pages_content_image_field', 'none');
  $username_field = variable_get('turbo_pages_username_field', 'none');

  $pregs = _converting_string_to_array(variable_get('turbo_pages_preg_replaces', ''));

  foreach($drupal_nodes as $key => $node) {
    // Сборка и вычищение нужных полей ноды
    $nodes[$key] = new stdClass();
    $nodes[$key]->nid = $node->nid;
    $nodes[$key]->title = $node->title;
    $nodes[$key]->created = $node->created;
    $nodes[$key]->url = url('node/' . $node->nid, array('absolute' => TRUE));

    if($image_field != 'none') {
      $image_preview = field_get_items('node' , $node, $image_field);
      $image_preview = field_view_value( 'node' , $node, $image_field, $image_preview[0]);

      $nodes[$key]->image_preview = image_style_url('large', $image_preview['#item']['uri']);
    }

    if($username_field != 'none') {

      if($uid != $node->uid) {
        $user = user_load($node->uid);
        $username = field_get_items('user' , $user, $username_field);
        $username = field_view_value( 'user' , $user, $username_field, $username[0]);
        $username = $username['#markup'];
      }

      $nodes[$key]->username = $username;
    }
    else {
      $nodes[$key]->username = $node->name;
    }

    foreach($content_fields as $field) {
      $content = field_get_items('node' , $node, $field);
      $content = field_view_value( 'node' , $node, $field, $content[0]);
      $content = $content['#markup'];
      $content = strip_tags($content, variable_get('turbo_pages_allowable_tags', ''));

      // TODO: обработка изображений и обертка в <figure>
      //$nodes[$key]->$field = str_replace('<img src='/', '<img src='' . $GLOBALS['base_url'] . '/', $nodes[$key]->$field);
      if(!empty($pregs[0])) {
        foreach ($pregs as $preg) {
          $content = preg_replace(trim($preg), '', $content);
        }
      }

      $nodes[$key]->content = $content;
    }

    $uid = $node->uid;
  }

  return theme('turbo_pages__rss',
    array(
      'channel_title' => $channel_title,
      'channel_description' => $channel_description,
      'nodes' => $nodes,
    )
  );
}

/**
 * @return mixed
 */
function _get_content_rss() {
  $node_types = variable_get('turbo_pages_content_types', FALSE);

  $query = db_select('node', 'n');
  $query->fields('n', array('nid', 'nid'))
    ->condition('n.status', 1)
    ->condition('n.type', $node_types)
    ->orderBy('n.uid', 'ASC');
  $result = $query->execute()->fetchAllKeyed();

  $nodes = node_load_multiple($result);

  return $nodes;
}

/**
 *
 */
function _get_rss() {
  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  print file_get_contents(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss');

  exit();
}

/**
 * Получение списка типов содержимого из таблицы `$table` в
 * виде ассоциативного массива, где ключ = $col1, а значение = $col2.
 *
 * @param $table
 * @param $col1
 * @param null $col2
 * @param array $conditions
 *
 * @return mixed - двумерный ассоциативный массив:
 */
function _get_col_from_db($table, $col1, $col2 = NULL, $conditions = array()) {
  if (!$col2) {
    $col2 = $col1;
  }

  $query = db_select($table, 't');
  $query->fields('t', array($col1, $col2));

  if(isset($conditions['module'])) {
    foreach ($conditions['module'] as $condition) {
      $query->condition('module', $condition);
    }
  }

  $columns = $query->execute()
    ->fetchAllKeyed();

  return $columns;
}

/**
 * @param $string_replacers
 *
 * @return array
 */
function _converting_string_to_array($string) {
  return explode(PHP_EOL, $string);
}

/**
 * @param $array_replacers
 *
 * @return string
 */
function _converting_array_to_string($array) {
  return implode(PHP_EOL, $array);
}
