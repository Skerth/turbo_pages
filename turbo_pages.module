<?php
/**
 * @file
 * A description of what your module does.
 */

/**
 * Constant used for path to file from root directory.
 */
define('PATH_TURBO_PAGES_RSS', DRUPAL_ROOT . '/sites/default/files/turbo_pages');


/**
 * Implements hook_menu().
 */
function turbo_pages_menu() {
  $items = array();

  // Admin settings.
  $items['admin/config/search/turbo_pages'] = array(
    'title' => 'Yandex Turbo pages',
    'description' => 'Config module Yandex Turbo pages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('turbo_pages_form_config'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'file' => 'includes/turbo_pages.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  // Understandable url to file.
  $rss_url = variable_get('turbo_pages_rss_url', 'turbo-pages.rss');
  $items[$rss_url] = array(
    'page callback' => '_turbo_pages_get_rss',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 * Создание и перезапись файла turbo_pages.rss по крону.
 */
function turbo_pages_cron() {
  $flag_cron = variable_get('turbo_pages_enable_cron', NULL);

  if ($flag_cron) {
    $update_frequency = variable_get('turbo_pages_rss_update_frequency', NULL);

    if (!(int)$update_frequency) {
      $update_frequency = variable_get('turbo_pages_rss_update_frequency_custom', NULL);
    }

    $file_create = filemtime(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss');
    $time = time();

    if (($file_create + $update_frequency) < $time) {
      _turbo_pages_create_rss();
    }
  }
}

/**
 * Implement hook_theme().
 */
function turbo_pages_theme() {
  return array(
    'turbo_pages__rss' => array(
      'template' => 'templates/turbo-pages--rss',
      'variables' => array(
        'channel_title' => NULL,
        'channel_description' => NULL,
        'nodes' => NULL,
      ),
    ),
  );
}

/**
 * Create or overwrite rss file.
 */
function _turbo_pages_create_rss() {
  if (!is_dir(PATH_TURBO_PAGES_RSS)) {
    mkdir(PATH_TURBO_PAGES_RSS, 0755);
  }

  $rss_content = _turbo_pages_generate_content_rss();

  $flag_minify = variable_get('turbo_pages_rss_minify', FALSE);
  if ($flag_minify) {
    $rss_content = _turbo_pages_minify_rss($rss_content);
  }

  $file_rss = fopen(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss', 'w');
  fwrite($file_rss, $rss_content);
  fclose($file_rss);

  watchdog('turbo_pages', 'RSS created');
}

/**
 * Content minify before adding to file. Removes spaces and line breaks.
 *
 * @param $rss_content
 *
 * @return mixed
 */
function _turbo_pages_minify_rss($rss_content) {
  // Minify HTML integration for RSS file generation.
  if (module_exists('minihtml')) {
    $rss_content = _minihtml_html($rss_content);
  }
  else {
    $search = array(
      '/\>[^\S ]+/s',     // strip whitespaces after tags, except space
      '/[^\S ]+\</s',     // strip whitespaces before tags, except space
      '/(\s)+/s',         // shorten multiple whitespace sequences
      '/<!--(.|\s)*?-->/', // Remove HTML comments
    );

    $replace = array(
      '>',
      '<',
      '\\1',
      '',
    );

    $rss_content = str_replace('  ', '', $rss_content);
    $rss_content = preg_replace($search, $replace, $rss_content);
  }

  return $rss_content;
}

/**
 * Getting from the database and content processing.
 */
function _turbo_pages_generate_content_rss() {
  $uid = NULL;
  $nodes = array();

  $channel_title = variable_get('turbo_pages_channel_title', NULL);
  $channel_description = variable_get('turbo_pages_channel_description', NULL);

  $content_fields = variable_get('turbo_pages_content_fields', FALSE);
  $image_field = variable_get('turbo_pages_content_image_field', 'none');
  $username_field = variable_get('turbo_pages_username_field', 'none');

  $preg_replaces = variable_get('turbo_pages_preg_replaces', '');
  // Convert a string with regular expressions to an array to run a loop on expressions.
  $preg_replaces = explode(PHP_EOL, $preg_replaces);

  module_load_include('inc', 'turbo_pages', 'includes/turbo_pages.db');
  $drupal_nodes = _turbo_pages_get_content_rss();
  foreach ($drupal_nodes as $key => $node) {
    $nodes[$key] = new stdClass();
    $nodes[$key]->nid = $node->nid;
    $nodes[$key]->title = $node->title;
    $nodes[$key]->created = $node->created;
    $nodes[$key]->url = url('node/' . $node->nid, array('absolute' => TRUE));

    if ($image_field != 'none') {
      $image_preview = field_get_items('node' , $node, $image_field);
      $image_preview = field_view_value( 'node' , $node, $image_field, $image_preview[0]);

      $nodes[$key]->image_preview = image_style_url('large', $image_preview['#item']['uri']);
    }

    if ($username_field != 'none') {

      if ($uid != $node->uid) {
        $user = user_load($node->uid);
        $username = field_get_items('user' , $user, $username_field);
        $username = field_view_value( 'user' , $user, $username_field, $username[0]);
        $username = $username['#markup'];
      }

      $nodes[$key]->username = $username;
    }
    else {
      $nodes[$key]->username = $node->name;
    }

    foreach ($content_fields as $field) {
      $content = field_get_items('node' , $node, $field);
      $content = field_view_value( 'node' , $node, $field, $content[0]);
      $content = $content['#markup'];
      $content = strip_tags($content, variable_get('turbo_pages_allowable_tags', ''));

      if (!empty($preg_replaces[0])) {
        foreach ($preg_replaces as $preg) {
          $content = preg_replace(trim($preg), '', $content);
        }
      }

      $nodes[$key]->content = $content;
    }

    $uid = $node->uid;
  }

  return theme('turbo_pages__rss',
    array(
      'channel_title' => $channel_title,
      'channel_description' => $channel_description,
      'nodes' => $nodes,
    )
  );
}

/**
 * Display RSS file contents.
 */
function _turbo_pages_get_rss() {
  drupal_add_http_header('Content-Type', 'application/rss+xml; charset=utf-8');
  print file_get_contents(PATH_TURBO_PAGES_RSS . '/turbo_pages.rss');

  exit();
}
